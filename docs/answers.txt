5.


a) Please paste the console output you saved at the end of step 3.

Carla@Carla-PC MINGW64 /c/CodeRepos/Assignment1/docs (master)
$ git pull
Already up-to-date.

Carla@Carla-PC MINGW64 /c/CodeRepos/Assignment1/docs (master)
$ git push
Counting objects: 4, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 602 bytes | 0 bytes/s, done.
Total 4 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/carlaoutput/Assignment1.git
   263a149..141703b  master -> master

Carla@Carla-PC MINGW64 /c/CodeRepos/Assignment1/docs (master)
$

=======================
(b) How many commits have been done to the repository (not only by you, but
by anyone) so far? Please write the git command you used to get this information. (5 points)

Carla@Carla-PC MINGW64 /c/CodeRepos/Assignment1/docs (master)
$ git shortlog -s -n
     5  irlabuser
     4  carlaoutput
     1  Carla.output

Carla@Carla-PC MINGW64 /c/CodeRepos/Assignment1/docs (master)
$

========================

(c) When was the file .gitignore modified last? Please write the git command you
used to get this information. (5 points)

On GitHub, navigate to the main page of the repository.

Click to open the file whose line history you want to view, in this case: .gitignore 

Click " Blame " button in the upper-right corner of the file view, so, click Blame to open the blame view.
Prior blame button to see earlier revisions of a specific line, or reblame, click  until you've
found the changes you're interested in viewing.
===========================


(d) Please list the IDs of the commits used to merge the changes from the branch
\development" to the branch \master". (5 points)

Carla@Carla-PC MINGW64 /c/CodeRepos/Assignment1/docs (master)
$ git shortlog -s -n
     5  irlabuser
     4  carlaoutput
     1  Carla.output

---------------
Carla@Carla-PC MINGW64 /c/CodeRepos/Assignment1/docs (master)
$ git log --merges
commit 1e88aa534ec7dbfbb87ca39fa20b4c25f7e4f13c
Merge: 04c11e4 90b3a5b
Author: carlaoutput <carla.output@gmail.com>
Date:   Thu Oct 5 12:22:21 2017 -0400

    Update answers.txt to test it

commit 36a8e55e4bbdd171ab57d979e1a802d740f2db9b
Merge: cb30d72 1cc7d66
Author: irlabuser <irlabuser@irlabvm>
Date:   Wed Sep 27 16:47:26 2017 -0500

    Merge development

commit cb30d72a3d94c108f393c163a35c1cc9bf18ffca
Merge: e7831f6 a46d926
Author: irlabuser <irlabuser@irlabvm>
Date:   Wed Sep 27 16:40:27 2017 -0500

    Merge development

------- IDs  cb30d72 1cc7d66
	     e7831f6 a46d926
=====================================================

(e) Mention two reasons for using branches in a Git repository. (6 points)

1) A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process discussed
in Git Basics. You can think of them as a way to request a brand new working directory, staging area, and project history. New commits
are recorded in the history for the current branch, which results in a fork in the history of the project. Git branch is tightly integrated
with the git checkout and git merge commands.

2) In Git, branches are a part of your everyday development process. When you want to add a new feature or fix a bug—no matter how big or how 
small—you spawn a new branch to encapsulate your changes. This makes sure that unstable code is never committed to the main code base, and it gives
 you the chance to clean up your feature’s history before merging it into the main branch.

====================================


(f) What is the difference between git log and git status? (5 points)


git status (Working with snapshots and the Git staging area)
show modified files in working directory, staged for your next commit


git log (Use for/on isolating work in branches, changing context, and integrating changes)
show all commits in the current branch’s history


=========================

(g) What command would you use to see the commits where \Weapon.h" was
one of the committed files? (5 points)

Carla@Carla-PC MINGW64 /c/CodeRepos/Assignment1 (master)
$ git log --follow Weapon.h
commit a46d9263dfca5ecc9a803da298fcb3b2e229131f
Author: irlabuser <irlabuser@irlabvm>
Date:   Wed Sep 27 16:31:42 2017 -0500

    Second version of the RoleGame prototype

    A new weapon was added (CommonSpear)

    Comments are finally real

commit e7831f68fb63e2047309691247cec975d9642c22
Author: irlabuser <irlabuser@irlabvm>
Date:   Wed Sep 27 16:03:55 2017 -0500

    First version of the RoleGame prototype

    This first version includes de Weapon abstract class, the WeaponsFactory
    and one of the necessary implementations (CommonSword).

    Comments are missing. Working on that now.

Carla@Carla-PC MINGW64 /c/CodeRepos/Assignment1 (master


=================================
(h) What command would you use to see the commits whose commit message
contains the word \file"? (5 points)

Carla@Carla-PC MINGW64 /c/CodeRepos/Assignment1/docs (master)
$ git log --grep=file
commit 1cc7d6674cce7e5339598e87e07e329c45814408
Author: irlabuser <irlabuser@irlabvm>
Date:   Wed Sep 27 16:47:05 2017 -0500

    README.md file was added

===============================
(i) In the context of object oriented programming

(I) What is inheritance?
In object-oriented programming, inheritance is when an object or class is based on another object (prototypal inheritance) or class (class-based inheritance), 
using the same implementation. Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of parent object. 
The idea behind inheritance in Java is that you can create new classes that are built upon existing classes.[1] or specifying a new implementation
 to maintain the same behavior (realizing an interface). Such an inherited class is called a subclass of its parent class or super class. 
It is a mechanism for code reuse and to allow independent extensions of the original software via public classes and interfaces. 
The relationships of objects or classes through inheritance give rise to a hierarchy.

(II) What is polymorphism? 

In object-oriented programming, polymorphism refers to a programming language's ability to process objects differently depending on their data type or class.
More specifically, it is the ability to redefine methods for derived classes. For example, given a base class shape, polymorphism enables the programmer to define
different area methods for any number of derived classes, such as circles, rectangles and triangles. No matter what shape an object is, applying the area method 
to it will return the correct results. In the same way, in many languages, integers and floats are implicitly polymorphic since you can add, subtract, multiply
and so on, irrespective of the fact that the types are different. 

(III) What is encapsulation? (9 points)

Encapsulation is used to hide the values or state of a structured data object inside a class, preventing unauthorized parties' direct access to them.
Publicly accessible methods are generally provided in the class (so-called getters and setters) to access the values, and other client classes call 
these methods to retrieve and modify the values within the object. So, it is a matter of risk management, dealing with combining of code and data as a single unit.
 

==============================








